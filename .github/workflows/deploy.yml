name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx wrangler types
        continue-on-error: true

      - name: Lint check
        run: npm run lint --if-present
        continue-on-error: true

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: 0bc21e3a5a9de1a4cc843be9c3e98121
          environment: staging
          secrets: |
            NEON_DATABASE_URL
            CF_API_TOKEN
            OPENAI_API_KEY
            AUTH_SECRET
        env:
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL_STAGING }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: 0bc21e3a5a9de1a4cc843be9c3e98121
          environment: production
          secrets: |
            NEON_DATABASE_URL
            CF_API_TOKEN
            OPENAI_API_KEY
            AUTH_SECRET
        env:
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL_PRODUCTION }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}

      - name: Purge CDN Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        continue-on-error: true

  preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get Neon Branch Database URL
        id: get-branch
        uses: neondatabase/get-branch-action@v1
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.pull_request.number }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Deploy Preview with Branch Database
        id: preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: 0bc21e3a5a9de1a4cc843be9c3e98121
          preCommands: echo "*** Deploying Preview with Neon Branch ***"
          command: deploy --env preview
          secrets: |
            NEON_DATABASE_URL
        env:
          NEON_DATABASE_URL: ${{ steps.get-branch.outputs.db_url_with_pooler }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => comment.body.includes('Preview deployment:'));
            const body = `ðŸš€ Preview deployment: https://chitty-ultimate-worker-preview.chittyos.workers.dev`;
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }